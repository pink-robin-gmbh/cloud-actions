name: Deploy version on AWS ASG

on:
  workflow_call:
    inputs:
      environment:
        description: 'Deploy to'
        default: Development
        type: string
        required: true
      registry:
        description: "URL of container registry"
        type: string
      repository:
        description: "Path/name of container repository (without registry URL)"
        type: string
      application:
        description: "Name of application"
        required: true
        type: string
      system:
        description: "System name of application"
        required: true
        type: string

    secrets:
      aws_access_key_id:
        description: "AWS Access Key ID for Secrets Manager & ASG"
        required: true
      aws_secret_access_key:
        description: "AWS Secret Access Key for Secrets Manager & ASG"
        required: true
      aws_region:
        description: "AWS Region for Secrets Manager & ASG"
        required: true
      environment_identifier:
        description: "Shortname/identifier of the selected environment"
        required: true
      environment_aio:
        description: "Specify if environment is running on AIO instance"
        required: false

jobs:
  Version:
    runs-on: [self-hosted, fastlane]
    environment:
      name: ${{ inputs.environment }}
    outputs:
      version: ${{ steps.version.outputs.version }}
      commit: ${{ steps.version.outputs.commit }}
      short: ${{ steps.version.outputs.short }}
      branch: ${{ steps.version.outputs.branch }}
      docker_tag: ${{ steps.version.outputs.docker_tag }}
      latest_tag: ${{ steps.version.outputs.latest_tag }}
      deployment_tag: ${{ steps.version.outputs.deployment_tag }}

    steps:
      - 
        name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      -
        id: version
        name: Derive version / tag
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/pink-robin-gmbh/cloud-actions/main/helpers/generate-version.sh)" -- -j -s version
          source version.sh
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT
          echo "short=$SHORT" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "docker_tag=$DOCKER_TAG" >> $GITHUB_OUTPUT
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "deployment_tag=${DOCKER_TAG:-${LATEST_TAG:-main-latest}}" >> $GITHUB_OUTPUT
          ENV_ID='${{ secrets.environment_identifier }}'
          ENV_ID=${ENV_ID:-unknown}
          if [ "$ENV_ID" = "unknown" ]; then echo "::error::GitHub Environment secret ENVIRONMENT_IDENTIFIER is missing"; exit 1; fi
      -
        name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ secrets.aws_region }}
      -
        name: Validate image availability
        run: |
          echo "${{ inputs.registry }}/${{ inputs.repository }}"
      -
        name: Set current version in runtime config on AWS Secrets Manager
        run: |
          ENV_ID='${{ secrets.environment_identifier }}'
          ENV_ID=${ENV_ID:-unknown}
          if [ "$ENV_ID" = "unknown" ]; then echo "::error::GitHub Environment secret ENVIRONMENT_IDENTIFIER is missing"; exit 1; fi
          
          echo "⬇️  Retrieve runtime config from AWS Secrets Manager"
          SECRET_NAME="${{ inputs.application }}-runtime-versions"
          CURRENT_SECRET=$(aws secretsmanager get-secret-value --secret-id "$SECRET_NAME" --query SecretString --output text)
          AWS_SECRET=
          SYSTEMS='${{ inputs.system }}'

          for SYSTEM_NAME in ${SYSTEMS//,/ }
          do
            echo "🏷  Set new version for $SYSTEM_NAME in runtime config on AWS Secrets Manager"
            JQ_PATH=".\"$(echo "$ENV_ID" | tr -cd 0-9a-zA-Z\-)\".\"$(echo "$SYSTEM_NAME" | tr -cd 0-9a-zA-Z\-)\".deploy.version"
            JQ_COMMAND="$JQ_PATH = \"${{ steps.version.outputs.deployment_tag }}\""
            AWS_SECRET=$(echo "${AWS_SECRET:-$CURRENT_SECRET}" | (jq . 2> /dev/null || echo "{}") | jq "$JQ_COMMAND")
            echo "::notice::⬆️ Updated runtime configuration for $SYSTEM_NAME from $(echo $CURRENT_SECRET | jq "$JQ_PATH" | sed 's/./& /g') to version \"$(echo "${{ steps.version.outputs.deployment_tag }}" | sed 's/./& /g')\""
          done
          echo "::notice::🔒 Saving new configuration to $SECRET_NAME"
          echo "::debug::$(echo "$AWS_SECRET" | jq .)"
          aws secretsmanager update-secret --secret-id "$SECRET_NAME" --secret-string "$(echo $AWS_SECRET | jq .)"
          
  Refresh:
    runs-on: [self-hosted, fastlane]
    needs: [Version]
    environment:
      name: ${{ inputs.environment }}

    steps:
      -
        name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ secrets.aws_region }}
      -
        id: refresh
        name: Start instance refresh
        run: |
          ENV_ID='${{ secrets.environment_identifier }}'
          ENV_ID=${ENV_ID:-unknown}
          if [ "$ENV_ID" = "unknown" ]; then echo "::error::GitHub Environment secret ENVIRONMENT_IDENTIFIER is missing"; exit 1; fi

          SYSTEMS='${{ inputs.system }}'
          if [ "${{ secrets.environment_aio }}" == "yes" ]; then
            SYSTEMS=aio
          fi

          for SYSTEM_NAME in ${SYSTEMS//,/ }
          do
            ASG_NAME="${{ inputs.application }}-$ENV_ID-$SYSTEM_NAME"
            echo "🚀  Initiate EC2/ASG instance refresh for ASG '$ASG_NAME'"
            INSTANCE_REFRESH=$(aws autoscaling start-instance-refresh --auto-scaling-group-name "$ASG_NAME")
            echo "::notice::🏗  Running instance refresh '$(echo "$INSTANCE_REFRESH" | jq -r ".InstanceRefreshId")' in background"
            INSTANCE_REFRESH_ID="$INSTANCE_REFRESH_ID,$(echo "$INSTANCE_REFRESH" | jq -r ".InstanceRefreshId")"
          done
          echo "instance_refresh_id=${INSTANCE_REFRESH_ID#"${INSTANCE_REFRESH_ID%%[!,]*}"}" >> $GITHUB_OUTPUT
      -
        name: Summarize update
        run: |
          echo "### :rocket: ${{ inputs.application }} *${{ inputs.system }}* deployment summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "| | Deployment Info |" >> $GITHUB_STEP_SUMMARY
          echo "| :-- | :-- |" >> $GITHUB_STEP_SUMMARY
          echo "| Current version | `${{ needs.Version.outputs.version }}` |" >> $GITHUB_STEP_SUMMARY
          echo "| Hash of commit | ${{ needs.Version.outputs.commit }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Short hash of commit | ${{ needs.Version.outputs.short }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build originates from branch | ${{ needs.Version.outputs.branch }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker image version tag | ${{ needs.Version.outputs.docker_tag }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Latest tag | ${{ needs.Version.outputs.latest_tag }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Instance refresh ID | ${{ steps.refresh.outputs.instance_refresh_id }} |" >> $GITHUB_STEP_SUMMARY
          