name: Finish release version

on:
  workflow_call:
    inputs:
      release_candidate:
        description: "Branch name for the release candidate release/v..."
        required: true
        type: string
      target_branch:
        description: "Name of target branch for release"
        default: main
        type: string
      development_branch:
        description: "Name of the development branch to also merge release back to"
        default: develop
        type: string

    secrets:
      cloud_github_pat:
        description: "GitHub PAT of CI user to access repos and trigger workflows"
        required: true

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  Release:
    runs-on: [self-hosted, fastlane]

    steps:
      -
        name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.cloud_github_pat }}
      -
        id: version
        name: Verify version from release branch name
        run: |
          HEAD_REF=$(echo "${{ inputs.release_candidate }}" | sed -e "s/^refs\/heads\///")
          VERSION=$(echo "$HEAD_REF" | sed -E -e 's/.*(release\/v((0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))?)).*/\2/g')
          if [[ "$VERSION" == "$HEAD_REF" ]]; then echo "::error::Branch is not a semver release 'release/v...' branch"; exit 1; fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_branch=$HEAD_REF" >> $GITHUB_OUTPUT
      -
        id: merge
        name: Merge ${{ steps.version.outputs.release_branch }} into ${{ inputs.target_branch }} branch
        run: |
          git config --global user.email "cloud@wastebox.biz"
          git config --global user.name "Cloud 3.0 CI/CD"

          git checkout ${{ inputs.target_branch }}
          git merge origin/${{ steps.version.outputs.release_branch }} --commit
          git commit --allow-empty -m "ðŸš€ Release v${{ steps.version.outputs.version }}"
          git tag v${{ steps.version.outputs.version }} -a -m "Release v${{ steps.version.outputs.version }} (`date`)"
          git push origin HEAD --tags

          echo "release_commit=$(git rev-parse --verify HEAD)" >> $GITHUB_OUTPUT
      -
        name: Summarize new release version
        run: |
          echo "### ðŸš€ Release new version ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "| | Build info |" >> $GITHUB_STEP_SUMMARY
          echo "| :-- | :-- |" >> $GITHUB_STEP_SUMMARY
          echo "| Release branch | \`${{ steps.version.outputs.release_branch }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Target branch | \`${{ inputs.target_branch }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Release commit | \`${{ steps.merge.outputs.release_commit }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Release version | *${{ steps.version.outputs.version }}* |" >> $GITHUB_STEP_SUMMARY
