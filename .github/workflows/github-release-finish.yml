name: Finish release version

on:
  workflow_call:
    inputs:
      release_candidate:
        description: "Branch name for the release candidate release/v..."
        required: true
        type: string
      target_branch:
        description: "Name of target branch for release"
        default: main
        type: string
      development_branch:
        description: "Name of the development branch to also merge release back to"
        default: develop
        type: string
        
jobs:
  Prepare:
    runs-on: [self-hosted, protomodule]

    steps:
      - 
        name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      -
        id: version
        name: Verify version from Pull Request
        run: |
          HEAD_REF=$(echo "${{ inputs.release_candidate }}" | sed -e "s/^refs\/heads\///")
          VERSION=$(echo "$HEAD_REF" | sed -E -e 's/.*(release\/v((0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))?)).*/\2/g')
          if [[ "$VERSION" == "$HEAD_REF" ]]; then echo "::error::Branch is not a semver release 'release/v...' branch"; exit 1; fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_branch=$HEAD_REF" >> $GITHUB_OUTPUT
      -
        id: merge
        name: Squash merge ${{ steps.version.outputs.release_branch }} into ${{ inputs.target_branch }} branch
        run: |
          git config --global user.email "cloud@wastebox.biz"
          git config --global user.name "Cloud 3.0 CI/CD"

          git checkout ${{ inputs.target_branch }}
          git merge origin/${{ steps.version.outputs.release_branch }} -s recursive -Xtheirs --commit -m "ðŸš€ [Cloud 3.0] Release v${{ steps.version.outputs.version }}"
          git push origin HEAD

          echo "release_commit=$(git rev-parse --verify HEAD)" >> $GITHUB_OUTPUT

          if [[ "${{ inputs.development_branch }}" != "" ]]; then
            git checkout ${{ inputs.development_branch }}
            git merge origin/${{ steps.version.outputs.release_branch }} -s recursive -Xtheirs --commit -m "âœ¨ [Cloud 3.0] Update ${{ inputs.development_branch }} branch with release v${{ steps.version.outputs.version }}"
            git push origin HEAD
          fi
      -
        name: Create git tag for version
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/v${{ steps.version.outputs.version }}",
              sha: "${{ steps.merge.outputs.release_commit }}"
            })
      -
        name: Delete merged branch
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.deleteRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "heads/${{ steps.version.outputs.release_branch }}",
            })
