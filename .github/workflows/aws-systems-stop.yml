name: Stop AWS ASG

on:
  workflow_call:
    inputs:
      environment:
        description: 'Stop environment'
        default: Development
        type: string
        required: true
      application:
        description: "Name of application"
        required: true
        type: string
      detached_system:
        description: "Specify a single system to restart when multiple systems belong to this application."
        type: string

    secrets:
      aws_access_key_id:
        description: "AWS Access Key ID for Secrets Manager & ASG"
        required: true
      aws_secret_access_key:
        description: "AWS Secret Access Key for Secrets Manager & ASG"
        required: true
      aws_region:
        description: "AWS Region for Secrets Manager & ASG"
        required: true
      systems:
        description: "Comma separated list of system names of application"
        required: true
      environment_identifier:
        description: "Shortname/identifier of the selected environment"
        required: true
      environment_aio:
        description: "Specify if environment is running on AIO instance (string: yes/no)"
        required: false

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  Refresh:
    runs-on: [self-hosted, fastlane]
    environment:
      name: ${{ inputs.environment }}

    steps:
      -
        name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ secrets.aws_region }}
      -
        id: reconfigure
        name: Trigger ASG reconfiguration
        run: |
          ENV_ID='${{ secrets.environment_identifier }}'
          ENV_ID=${ENV_ID:-unknown}
          if [ "$ENV_ID" = "unknown" ]; then echo "::error::GitHub action input ENVIRONMENT_IDENTIFIER is missing"; exit 1; fi

          DETACHED_SYSTEM='${{ inputs.detached_system }}'
          SYSTEMS='${{ secrets.systems }}'
          SYSTEMS=${DETACHED_SYSTEM:-$SYSTEMS}
          if [ "${{ secrets.environment_aio }}" == "yes" ]; then
            SYSTEMS=aio
          fi

          echo "### :o: Stopping ${{ inputs.application }} *$(echo $ENV_ID | sed 's/./& /g' | xargs | sed 's/ /â€‰/g')*" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "| | Reconfiguration Info |" >> $GITHUB_STEP_SUMMARY
          echo "| :-- | :-- |" >> $GITHUB_STEP_SUMMARY
          
          for SYSTEM_NAME in ${SYSTEMS//,/ }
          do
            ASG_NAME="${{ inputs.application }}-$ENV_ID-$SYSTEM_NAME"
            
            echo "ðŸ”§  Reconfigure EC2/ASG parameters for '$ASG_NAME'"
            aws autoscaling set-desired-capacity --auto-scaling-group-name $ASG_NAME --desired-capacity 0

            echo "| Desired capacity for $(echo $SYSTEM_NAME | sed 's/./& /g' | xargs | sed 's/ /â€‰/g') | 0 |" >> $GITHUB_STEP_SUMMARY
          done
